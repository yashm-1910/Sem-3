/*
Constructors and destructors dont have a return type
A constructor will have exact same name as the class
A constructor is automatically called when a object is created
If we do not specify any constructor then a constructor is generated by default
Constructors can have parameters
it is used to initalize a class
A class can have multiple constructors
It can be overloaded
*/
/*
A destructor will have exact same name as the class prefixed with a tilde (~) 
It can neither return a value nor can it take any parameters. 
Destructor can be very useful for releasing resources before coming out of the program 
like closing files, releasing memories etc.
If we do not specify any destructor then a constructor is generated by default
A class can have only one destructor, it cannot be overloaded
*/

#include <iostream>
 
using namespace std;
//Class Declaration
class Line {
   public:
      void setLength( double len );
      double getLength( void );
      Line(double len);  // This is the constructor
      Line();
      ~Line();//This is the destructor
 
   private:
      double length;
};
 
// Member functions definitions including constructor and destructor
//Constructor
Line::Line( double len) {
   cout << "Object is being created, length = " << len << endl;
   length = len;
}
Line::Line() {
   cout << "Object is being created"<< endl;
}
void Line::setLength( double len ) {
   length = len;
}
double Line::getLength( void ) {
   return length;
}

//Destructor
Line::~Line(void) {
   cout << "Object is being deleted" << endl;
}

// Main function for the program
int main() {
   Line line1;
   Line line(10.0);
   
   // get initially set length.
   cout << "Length of line : " << line.getLength() <<endl;
   
   // set line length again
   line.setLength(6.0); 
   cout << "Length of line : " << line.getLength() <<endl;
 
   return 0;
}